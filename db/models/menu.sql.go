// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: menu.sql

package models

import (
	"context"
	"database/sql"
)

const createMenu = `-- name: CreateMenu :execresult
INSERT INTO menus (name_product, price, description_product, image_product, stock_product) 
VALUES (?, ?, ?, ?, ?)
`

type CreateMenuParams struct {
	NameProduct        string
	Price              int64
	DescriptionProduct string
	ImageProduct       string
	StockProduct       int32
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMenu,
		arg.NameProduct,
		arg.Price,
		arg.DescriptionProduct,
		arg.ImageProduct,
		arg.StockProduct,
	)
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menus WHERE id = ?
`

func (q *Queries) DeleteMenu(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const getMenuByID = `-- name: GetMenuByID :one
SELECT id, name_product, price, description_product, image_product, stock_product, created_at, updated_at FROM menus WHERE id = ?
`

func (q *Queries) GetMenuByID(ctx context.Context, id int32) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenuByID, id)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.NameProduct,
		&i.Price,
		&i.DescriptionProduct,
		&i.ImageProduct,
		&i.StockProduct,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMenus = `-- name: ListMenus :many
SELECT id, name_product, price, description_product, image_product, stock_product, created_at, updated_at FROM menus ORDER BY created_at DESC
`

func (q *Queries) ListMenus(ctx context.Context) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, listMenus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Menu
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.NameProduct,
			&i.Price,
			&i.DescriptionProduct,
			&i.ImageProduct,
			&i.StockProduct,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenu = `-- name: UpdateMenu :exec
UPDATE menus 
SET name_product = ?, price = ?, description_product = ?, image_product = ?, stock_product = ?
WHERE id = ?
`

type UpdateMenuParams struct {
	NameProduct        string
	Price              int64
	DescriptionProduct string
	ImageProduct       string
	StockProduct       int32
	ID                 int32
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) error {
	_, err := q.db.ExecContext(ctx, updateMenu,
		arg.NameProduct,
		arg.Price,
		arg.DescriptionProduct,
		arg.ImageProduct,
		arg.StockProduct,
		arg.ID,
	)
	return err
}
